//#include <avr/io.h>
#include <stdio.h>
#include "Types.h"
#include "BIT_MATH.h"
#include "LED_interface.h"
#include "SWT_interface.h"
#include "EXTI_interface.h"
#include "LCD_interface.h"
#include "KPD_interface.h"
#include "LCD_private.h"
#include "KPD_private.h"
#include "EEPROM_interface.h"
#define F_CPU 8000000
#include <util/delay.h>

u8 check_password ();


void enter_password ();


void set_password ();


u8 PRESSED_KEY, k[4], PASSWORD[4], x = 0, i =0, CHECK_PASSWORD[4], h[4], counter = 3, d;


int main (void)
{
	
	LCD_vidInit4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE);
	
	KPD_vidInit (GPIOC, LOW_NIBBLE, HIGH_NIBBLE);
	
	
	if (EEPROM_voidRead (1) == 0xFF)
	
	{
		
		LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"WELCOME :)");
		
		_delay_ms (1000);
		
		LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE);
		
		LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Set pass : ");
		
		LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE, 0xC0);
		
		set_password ();
		
	}
	
	else
	
	{
		
		for (i = 0; i < 4; i++)
		
		{
			
			PASSWORD[i] = EEPROM_voidRead ((i + 1));
			
		}
		
		LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Enter Pass :");
		
		LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE, 0xC0);
		
		enter_password ();
		
		d = check_password ();
		
		while (d == 0)
		
		{
			
			enter_password ();
			
			d = check_password ();
			
		}
		
	}

	
	
}



void set_password ()
{
	
	while (x < 4)
	
	{
		
		PRESSED_KEY = KPD_u8GetPressedKey (GPIOC, LOW_NIBBLE, HIGH_NIBBLE);
		
		if (PRESSED_KEY != 0xFF)
		
		{
			
			LCD_vidDisplayChar4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, PRESSED_KEY);
			
			_delay_ms (500);
			
			k[x] = PRESSED_KEY;
			
			EEPROM_voidWrite (x + 1, k[x]);
			
			PASSWORD[x] = EEPROM_voidRead (x + 1);
			
			x++;
			
			LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,LCD_MOVE_CURSOR_LEFT);
			
			LCD_vidDisplayChar4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, '*');
			
			_delay_ms (100);
			
		}
		
		
	}
	
	_delay_ms (10);
	
	LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE);
	
	LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Pass is set");
	
	_delay_ms (1000);
	
	enter_password ();
	
	d = check_password ();
	
	while (d == 0)
	
	{
		
		enter_password ();
		
		d = check_password ();
		
	}

	
}



void enter_password ()
{
	
	_delay_ms (100);
	
	LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE);
	
	LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Enter Pass :");
	
	_delay_ms (300);
	
	LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE, 0xC0);
	
	for (i = 0; i < 4; i++)
	
	{
		
		do
		
		{
			
			PRESSED_KEY = KPD_u8GetPressedKey (GPIOC, LOW_NIBBLE, HIGH_NIBBLE);
			
		}
		while (PRESSED_KEY == 0xFF);
		
		LCD_vidDisplayChar4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,PRESSED_KEY);
		
		_delay_ms (500);
		
		CHECK_PASSWORD[i] = PRESSED_KEY;
		
		LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,LCD_MOVE_CURSOR_LEFT);
		
		LCD_vidDisplayChar4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,'*');
		
		_delay_ms (100);
		
	}

}



u8 check_password ()
{
	
	if (CHECK_PASSWORD[0] == PASSWORD[0] && CHECK_PASSWORD[1] == PASSWORD[1]&& CHECK_PASSWORD[2] == PASSWORD[2]&& CHECK_PASSWORD[3] == PASSWORD[3])
	
	{
		
		LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE);
		
		LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Pass is right :) ");
		
		LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE, 0xC0);
		
		LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,"Safe is open :p ");
		
		d = 1;
		
	}
	
	else
	
	{
		
		if (counter > 0)
		
		{
			
			LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE);
			
			LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, "Pass is wrong :(");
			
			_delay_ms (1000);
			
			LCD_vidSendCmd4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3, LOW_NIBBLE,0xC0);
			
			LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, "Tries Left:");
			
			LCD_vidDisplayNumber4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, counter);
			
			_delay_ms (1000);
			
			counter--;
			
			LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE);
			
			d = 0;
			
		}
		
		else
		
		{
			
			LCD_vidClearScreen4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE);
			
			LCD_voidDisplayString4bit (GPIOA, GPIOB, PIN2, GPIOB, PIN3,LOW_NIBBLE, "Safe is Closed :(");
			
			_delay_ms (1000);
			
			d = 1;
			
		}
		
		
	}
	
	return d;

}







